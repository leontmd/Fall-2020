<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spreadsheet</name>
    </assembly>
    <members>
        <member name="T:SS.CircularException">
            <summary>
            Thrown to indicate that a change to a cell will cause a circular dependency.
            </summary>
        </member>
        <member name="T:SS.InvalidNameException">
            <summary>
            Thrown to indicate that a name parameter was either null or invalid.
            </summary>
        </member>
        <member name="T:SS.SpreadsheetReadException">
            <summary>
            Thrown to indicate that a saved spreadsheet could not be read
            because of a formatting problem.
            </summary>
        </member>
        <member name="M:SS.SpreadsheetReadException.#ctor(System.String)">
            <summary>
            Creates the exception with a message
            </summary>
        </member>
        <member name="T:SS.SpreadsheetVersionException">
            <summary>
            Thrown to indicate that a saved spreadsheet could not be read
            because of a versioning problem.
            </summary>
        </member>
        <member name="M:SS.SpreadsheetVersionException.#ctor(System.String)">
            <summary>
            Creates the exception with a message
            </summary>
        </member>
        <member name="T:SS.FormulaError">
            <summary>
            A possible value of a cell.
            </summary>
        </member>
        <member name="M:SS.FormulaError.#ctor(System.String)">
            <summary>
            Constructs a FormulaError containing the explanatory reason.
            </summary>
        </member>
        <member name="P:SS.FormulaError.Reason">
            <summary>
             The reason why this FormulaError was created.
            </summary>
        </member>
        <member name="T:SS.AbstractSpreadsheet">
            <summary>
            An AbstractSpreadsheet object represents the state of a simple spreadsheet.  A 
            spreadsheet consists of a regular expression (called IsValid below) and an infinite 
            number of named cells.
            
            A string is a valid cell name if and only if (1) s consists of one or more letters, 
            followed by a non-zero digit, followed by zero or more digits AND (2) the C#
            expression IsValid.IsMatch(s.ToUpper()) is true.
            
            For example, "A15", "a15", "XY32", and "BC7" are valid cell names, so long as they also
            are accepted by IsValid.  On the other hand, "Z", "X07", and "hello" are not valid cell 
            names, regardless of IsValid.
            
            Any valid incoming cell name, whether passed as a parameter or embedded in a formula,
            must be normalized by converting all letters to upper case before it is used by this 
            this spreadsheet.  For example, the Formula "x3+a5" should be normalize to "X3+A5" before 
            use.  Similarly, all cell names and Formulas that are returned or written to a file must also
            be normalized.
            
            A spreadsheet contains a unique cell corresponding to every possible cell name.  
            In addition to a name, each cell has a contents and a value.  The distinction is
            important, and it is important that you understand the distinction and use
            the right term when writing code, writing comments, and asking questions.
            
            The contents of a cell can be (1) a string, (2) a double, or (3) a Formula.  If the
            contents is an empty string, we say that the cell is empty.  (By analogy, the contents
            of a cell in Excel is what is displayed on the editing line when the cell is selected.)
            
            In an empty spreadsheet, the contents of every cell is the empty string.
             
            The value of a cell can be (1) a string, (2) a double, or (3) a FormulaError.  
            (By analogy, the value of an Excel cell is what is displayed in that cell's position
            in the grid.)
            
            If a cell's contents is a string, its value is that string.
            
            If a cell's contents is a double, its value is that double.
            
            If a cell's contents is a Formula, its value is either a double or a FormulaError.
            The value of a Formula, of course, can depend on the values of variables.  The value 
            of a Formula variable is the value of the spreadsheet cell it names (if that cell's 
            value is a double) or is undefined (otherwise).  If a Formula depends on an undefined
            variable or on a division by zero, its value is a FormulaError.  Otherwise, its value
            is a double, as specified in Formula.Evaluate.
            
            Spreadsheets are never allowed to contain a combination of Formulas that establish
            a circular dependency.  A circular dependency exists when a cell depends on itself.
            For example, suppose that A1 contains B1*2, B1 contains C1*2, and C1 contains A1*2.
            A1 depends on B1, which depends on C1, which depends on A1.  That's a circular
            dependency.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Changed">
            <summary>
            True if this spreadsheet has been modified since it was created or saved
            (whichever happened most recently); false otherwise.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Save(System.IO.TextWriter)">
             <summary>
             Writes the contents of this spreadsheet to dest using an XML format.
             The XML elements should be structured as follows:
            
             <spreadsheet IsValid="IsValid regex goes here">
               <cell name="cell name goes here" contents="cell contents go here"></cell>
               <cell name="cell name goes here" contents="cell contents go here"></cell>
               <cell name="cell name goes here" contents="cell contents go here"></cell>
             </spreadsheet>
            
             The value of the IsValid attribute should be IsValid.ToString()
             
             There should be one cell element for each non-empty cell in the spreadsheet.
             If the cell contains a string, the string (without surrounding double quotes) should be written as the contents.
             If the cell contains a double d, d.ToString() should be written as the contents.
             If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
            
             If there are any problems writing to dest, the method should throw an IOException.
             </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellValue(System.String)">
             <summary>
             If name is null or invalid, throws an InvalidNameException.
            
             Otherwise, returns the value (as opposed to the contents) of the named cell.  The return
             value should be either a string, a double, or a FormulaError.
             </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetContentsOfCell(System.String,System.String)">
             <summary>
             If content is null, throws an ArgumentNullException.
            
             Otherwise, if name is null or invalid, throws an InvalidNameException.
            
             Otherwise, if content parses as a double, the contents of the named
             cell becomes that double.
            
             Otherwise, if content begins with the character '=', an attempt is made
             to parse the remainder of content into a Formula f using the Formula
             constructor with s => s.ToUpper() as the normalizer and a validator that
             checks that s is a valid cell name as defined in the AbstractSpreadsheet
             class comment.  There are then three possibilities:
            
               (1) If the remainder of content cannot be parsed into a Formula, a
                   Formulas.FormulaFormatException is thrown.
            
               (2) Otherwise, if changing the contents of the named cell to be f
                   would cause a circular dependency, a CircularException is thrown.
            
               (3) Otherwise, the contents of the named cell becomes f.
            
             Otherwise, the contents of the named cell becomes content.
            
             If an exception is not thrown, the method returns a set consisting of
             name plus the names of all other cells whose value depends, directly
             or indirectly, on the named cell.
            
             For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
             set {A1, B1, C1} is returned.
             </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes number.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            If text is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes text.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,Formulas.Formula)">
            <summary>
            Requires that all of the variables in formula are valid cell names.
            
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException.
            
            Otherwise, the contents of the named cell becomes formula.  The method returns a
            Set consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetDirectDependents(System.String)">
            <summary>
            If name is null, throws an ArgumentNullException.
            
            Otherwise, if name isn't a valid cell name, throws an InvalidNameException.
            
            Otherwise, returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.Collections.Generic.ISet{System.String})">
            <summary>
            Requires that names be non-null.  Also requires that if names contains s,
            then s must be a valid non-null cell name.
            
            If any of the named cells are involved in a circular dependency,
            throws a CircularException.
            
            Otherwise, returns an enumeration of the names of all cells whose values must
            be recalculated, assuming that the contents of each cell named in names has changed.
            The names are enumerated in the order in which the calculations should be done.  
            
            For example, suppose that 
            A1 contains 5
            B1 contains 7
            C1 contains the formula A1 + B1
            D1 contains the formula A1 * C1
            E1 contains 15
            
            If A1 and B1 have changed, then A1, B1, and C1, and D1 must be recalculated,
            and they must be recalculated in either the order A1,B1,C1,D1 or B1,A1,C1,D1.
            The method will produce one of those enumerations.
            
            PLEASE NOTE THAT THIS METHOD DEPENDS ON THE ABSTRACT GetDirectDependents.
            IT WON'T WORK UNTIL GetDirectDependents IS IMPLEMENTED CORRECTLY.  YOU WILL
            NOT NEED TO MODIFY THIS METHOD.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.String)">
            <summary>
            A convenience method for invoking the other version of GetCellsToRecalculate
            with a singleton set of names.  See the other version for details.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Visit(System.String,System.String,System.Collections.Generic.ISet{System.String},System.Collections.Generic.LinkedList{System.String})">
            <summary>
            A helper for the GetCellsToRecalculate method.
            </summary>
        </member>
        <member name="T:SS.Spreadsheet">
            <summary>
            spreadsheet object that extends the AbstractSpreadsheet class
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.#ctor">
            <summary>
            Creates an empty Spreadsheet whose IsValid regular expression accepts every string.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Creates an empty Spreadsheet whose IsValid regular expression is provided as the parameter
            </summary>
            <param name="isValid"></param>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.IO.TextReader,System.Text.RegularExpressions.Regex)">
            <summary>
            creates a Spreadsheet from a saved file
            </summary>
        </member>
        <member name="P:SS.Spreadsheet.Changed">
            <summary>
            True if this spreadsheet has been modified since it was created or saved
            (whichever happened most recently); false otherwise.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.ValidName(System.String)">
            <summary>
            checks for valid names of cells
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:SS.Spreadsheet.GetCellValue(System.String)">
             <summary>
             If name is null or invalid, throws an InvalidNameException.
            
             Otherwise, returns the value (as opposed to the contents) of the named cell.  The return
             value should be either a string, a double, or a FormulaError.
             </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.Save(System.IO.TextWriter)">
             <summary>
             Writes the contents of this spreadsheet to dest using an XML format.
             The XML elements should be structured as follows:
            
             <spreadsheet IsValid="IsValid regex goes here">
               <cell name="cell name goes here" contents="cell contents go here"></cell>
               <cell name="cell name goes here" contents="cell contents go here"></cell>
               <cell name="cell name goes here" contents="cell contents go here"></cell>
             </spreadsheet>
            
             The value of the IsValid attribute should be IsValid.ToString()
             
             There should be one cell element for each non-empty cell in the spreadsheet.
             If the cell contains a string, the string (without surrounding double quotes) should be written as the contents.
             If the cell contains a double d, d.ToString() should be written as the contents.
             If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
            
             If there are any problems writing to dest, the method should throw an IOException.
             </summary>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes number.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            If text is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes text.  The method returns a
            set consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,Formulas.Formula)">
            <summary>
            Requires that all of the variables in formula are valid cell names.
            
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException.
            
            Otherwise, the contents of the named cell becomes formula.  The method returns a
            Set consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            set {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.lookupValue(System.String)">
            <summary>
            lookups the values in formulas if the cell contains a formula
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:SS.Spreadsheet.SetContentsOfCell(System.String,System.String)">
             <summary>
             If content is null, throws an ArgumentNullException.
            
             Otherwise, if name is null or invalid, throws an InvalidNameException.
            
             Otherwise, if content parses as a double, the contents of the named
             cell becomes that double.
            
             Otherwise, if content begins with the character '=', an attempt is made
             to parse the remainder of content into a Formula f using the Formula
             constructor with s => s.ToUpper() as the normalizer and a validator that
             checks that s is a valid cell name as defined in the AbstractSpreadsheet
             class comment.  There are then three possibilities:
            
               (1) If the remainder of content cannot be parsed into a Formula, a
                   Formulas.FormulaFormatException is thrown.
            
               (2) Otherwise, if changing the contents of the named cell to be f
                   would cause a circular dependency, a CircularException is thrown.
            
               (3) Otherwise, the contents of the named cell becomes f.
            
             Otherwise, the contents of the named cell becomes content.
            
             If an exception is not thrown, the method returns a set consisting of
             name plus the names of all other cells whose value depends, directly
             or indirectly, on the named cell.
            
             For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
             set {A1, B1, C1} is returned.
             </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetDirectDependents(System.String)">
            <summary>
            If name is null, throws an ArgumentNullException.
            
            Otherwise, if name isn't a valid cell name, throws an InvalidNameException.
            
            Otherwise, returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            </summary>
        </member>
        <member name="T:SS.Spreadsheet.Cell">
            <summary>
            private class Cell creates a cell object
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.Cell.#ctor(System.String)">
            <summary>
            constructs a Cell of type string
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:SS.Spreadsheet.Cell.#ctor(System.Double)">
            <summary>
            constructs a cell of type double
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:SS.Spreadsheet.Cell.#ctor(Formulas.Formula,Formulas.Lookup)">
            <summary>
            constructs a Cell of Formula and Lookup
            </summary>
            <param name="f"></param>
            <param name="l"></param>
        </member>
    </members>
</doc>
